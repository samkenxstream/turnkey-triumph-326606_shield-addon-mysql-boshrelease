#!/bin/bash
#
# ci/scripts/shipit
#
# Script for generating Github release / tag assets
# and managing release notes for a BOSH Release pipeline
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

set -eu

header() {
	echo
	echo "###############################################"
	echo
	echo $*
	echo
}

bail() {
	echo >&2 $* "  Did you misconfigure Concourse?"
	exit 2
}

test -n "${REPO_ROOT:-}"      || bail "REPO_ROOT must be set to the full path to the Git repository."
test -n "${RELEASE_ROOT:-}"   || bail "RELEASE_ROOT must be set to the output directory where release artifacts should go."
test -n "${REPO_OUT:-}"       || bail "REPO_OUT must be set to the output directory where the Git working copy should be moved to."
test -n "${BRANCH:-}"         || bail "BRANCH must be set to the git branch you pulled the Git repository from."
test -n "${GITHUB_OWNER:-}"   || bail "GITHUB_OWNER must be set to the name of the Github user or organization that owns the Git repository."
test -n "${VERSION_FROM:-}"   || bail "VERSION_FROM must be set to the path of the input version file."
test -n "${AWS_ACCESS_KEY:-}" || bail "AWS_ACCESS_KEY must be set to your AWS access key ID (AKI) to use for uploading release artifacts to S3."
test -n "${AWS_SECRET_KEY:-}" || bail "AWS_SECRET_KEY must be set to your AWS secret key to use for uploading release artifacts to S3."
test -n "${GIT_EMAIL:-}"      || bail "GIT_EMAIL must be set to an email address to use for Git commits."
test -n "${GIT_NAME:-}"       || bail "GIT_NAME must be set to something; it will be used for Git commits."

test -f "${VERSION_FROM}"     || bail "Version file (${VERSION_FROM}) not found."
VERSION=$(cat ${VERSION_FROM})
test -n "${VERSION}"          || bail "Version file (${VERSION_FROM}) was empty."

if [[ ! -f ${REPO_ROOT}/ci/release_notes.md ]]; then
  echo >&2 "ci/release_notes.md not found.  Did you forget to write them?"
  exit 1
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

###############################################################

cd ${REPO_ROOT}
RELEASE_NAME=$(bosh2 int config/final.yml --path /final_name)

cat > config/private.yml <<YAML
---
blobstore:
  provider: s3
  options:
    access_key_id: ${AWS_ACCESS_KEY}
    secret_access_key: ${AWS_SECRET_KEY}
YAML

header "Pulling in any git submodules..."
git submodule update --init --recursive --force

header "Create final release..."
bosh2 -n create-release --final --version "${VERSION}"
bosh2 -n create-release releases/$RELEASE_NAME/$RELEASE_NAME-$VERSION.yml \
              --tarball releases/$RELEASE_NAME/$RELEASE_NAME-$VERSION.tgz
cd -

RELEASE_TGZ=$REPO_ROOT/releases/$RELEASE_NAME/$RELEASE_NAME-$VERSION.tgz
export SHA1=$(sha1sum $RELEASE_TGZ | head -n1 | awk '{print $1}')
echo "SHA1=$SHA1"

mkdir -p ${RELEASE_ROOT}/artifacts
echo "v${VERSION}"                         > ${RELEASE_ROOT}/tag
echo "v${VERSION}"                         > ${RELEASE_ROOT}/name
mv ${REPO_ROOT}/releases/*/*-${VERSION}.tgz  ${RELEASE_ROOT}/artifacts
mv ${REPO_ROOT}/ci/release_notes.md          ${RELEASE_ROOT}/notes.md
cat >> ${RELEASE_ROOT}/notes.md <<EOF

### Deployment
\`\`\`yaml
releases:
- name: $RELEASE_NAME
  version: $VERSION
  url: https://github.com/${GITHUB_OWNER}/${RELEASE_NAME}-boshrelease/releases/download/v${VERSION}/${RELEASE_NAME}-${VERSION}.tgz
  sha1: $SHA1
\`\`\`
EOF
cat > ${RELEASE_ROOT}/notification <<EOF
<!here> New ${RELEASE_NAME} v${VERSION} released!
EOF


header "Update git repo with final release..."
if [[ -z $(git config --global user.email) ]]; then
  git config --global user.email "${GIT_EMAIL}"
fi
if [[ -z $(git config --global user.name) ]]; then
  git config --global user.name "${GIT_NAME}"
fi

(cd ${REPO_ROOT}
 for MANIFEST_PATH in $(ls manifests/*.yml); do
   $DIR/update-manifest $GITHUB_OWNER $RELEASE_NAME $VERSION $SHA1 $MANIFEST_PATH
 done
 git merge --no-edit ${BRANCH}
 git add -A
 git status
 git commit -m "release v${VERSION}")

# so that future steps in the pipeline can push our changes
cp -a ${REPO_ROOT} ${REPO_OUT}

cat > ${NOTIFICATION_OUT:-notifications}/message <<EOS
New ${RELEASE_NAME} v${VERSION} released. <https://github.com/${GITHUB_OWNER}/${RELEASE_NAME}-boshrelease/releases/tag/v${VERSION}|Release notes>.
EOS
